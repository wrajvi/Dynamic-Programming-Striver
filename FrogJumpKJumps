#include<bits/stdc++.h>
using namespace std;
//MEMOISATION
// Time Complexity: O(N *K)

// Reason: The overlapping subproblems will return the answer in constant time. Therefore the total number of new subproblems we solve is ‘n’. At every new subproblem, we are running another loop for K times. Hence total time complexity is O(N * K).

// Space Complexity: O(N)

// Reason: We are using a recursion stack space(O(N)) and an array (again O(N)). Therefore total space complexity will be O(N) + O(N) ≈ O(N)
int frog(int n,int k,vector<int> &heights,vector<int> &dp)
{
	int cost=INT_MAX;
    if(n==0)
    	return 0;
    if(dp[n]!=-1)
    	return dp[n];
	for(int i=1;i<=k;i++)
	{
		if(n-i>=0)
		{
			int step=frog(n-i,k,heights,dp)+abs(heights[n-i]-heights[n]);
			cost=min(cost,step);
		}

	}
	return dp[n]=cost;


}
int frogJumpk(int n,int k,vector<int> &heights)
{
	// Tabulation
// 	Time Complexity: O(N*K)

// Reason: We are running two nested loops, where outer loops run from 1 to n-1 and the inner loop runs from 1 to K

// Space Complexity: O(N)

// Reason: We are using an external array of size ‘n’’.
	vector<int> dp(n,0);
	for(int i=1;i<n;i++)
	{
		int cost=INT_MAX;
		for(int j=1;j<=k;j++)
		{
          if(i-j>=0)
          {
          	int steps=dp[i-j]+abs(heights[i-j]-heights[i]);
          	cost=min(cost,steps);
          }
		}
		dp[i]=cost;
	}
	return dp[n-1];
}

int main()
{

int n,k;
cin>>n>>k;
vector<int> heights(n);
for(int i=0;i<n;i++)
{
	cin>>heights[i];
}

cout<<frogJumpk(n,k,heights);
}
