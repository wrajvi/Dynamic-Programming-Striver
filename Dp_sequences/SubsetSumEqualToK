#include <bits/stdc++.h> 
using namespace std;
//MEMOSATION
//Time Complexity: O(N*K)

//Reason: There are N*K states therefore at max ‘N*K’ new problems will be solved.

//Space Complexity: O(N*K) + O(N)

//Reason: We are using a recursion stack space(O(N)) and a 2D array ( O(N*K)).
bool sum(int n,int k,vector<int> &arr,vector<vector<int>>&dp)
{
    if(k==0)
        return true;
    if(n==0)
        return(arr[0]==k);
    if(dp[n][k]!=-1)
        return dp[n][k];
    if(arr[n]<=k)
    {
        return dp[n][k]=sum(n-1,k,arr,dp)|sum(n-1,k-arr[n],arr,dp); 
    }
    else
    {
        return dp[n][k]=sum(n-1,k,arr,dp);
    }
    
}
bool subsetSumToK(int n, int k, vector<int> &arr) {
//TABULATION 
//Time Complexity: O(N*K)

//Reason: There are two nested loops

//Space Complexity: O(N*K)

//Reason: We are using an external array of size ‘N*K’. Stack Space is eliminated.
    // Write your code here.
    // vector<vector<int>> dp(n,vector<int> (k+1,0));
    // for(int i=0;i<n;i++)
    // {
    //     dp[i][0]=1;
    // }
    // if(arr[0]<=k)
    //     dp[0][arr[0]]=1;
    // for(int i=1;i<n;i++)
    // {
    //     for(int j=1;j<=k;j++)
    //     {
    //         if(arr[i]<=j)
    //         {
    //             dp[i][j]=dp[i-1][j]|dp[i-1][j-arr[i]];
    //         }
    //         else
    //         {
    //             dp[i][j]=dp[i-1][j];
    //         }
            
    //     }
    // }
    // return dp[n-1][k];
    
    //TABULATION BY ADITYA
    
    vector<vector<int>> dp(n+1,vector<int>(k+1,0));
    for(int i=0;i<=n;i++)
    {
    	for(int j=0;j<=k;j++)
    	{
    		if(i==0)
    		{
    			dp[i][j]=0;
    		}
    		if(j==0)
    		{
    			dp[i][j]=1;
    		}
    	}
    }
    for(int i=1;i<=n;i++)
    {
    	for(int j=1;j<=k;j++)
    	{
    		if(arr[i-1]<=j)
    		{
    			dp[i][j]=dp[i-1][j]|dp[i-1][j-arr[i-1]];
    		}
    		else
    			dp[i][j]=dp[i-1][j];
    	}
    }
    
    return dp[n][k];
    
}
int main()
{
	int n,k;
	cin>>n>>k;
	vector<int> arr(n);
	for(int i=0;i<n;i++)
		cin>>arr[i];
	cout<<subsetSumToK(n,k,arr)<<endl;
}
